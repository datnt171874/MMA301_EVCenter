openapi: 3.0.3
info:
  title: MMA Electric Scooter API
  version: 1.0.0
  description: API documentation for MMA backend
servers:
  - url: http://localhost:3000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthSuccess:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            user:
              type: object
              properties:
                id:
                  type: string
                email:
                  type: string
                roleName:
                  type: string
            token:
              type: string
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        error:
          type: string
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            type: string
        shopId:
          type: string
        category:
          type: string
        brand:
          type: string
        price:
          type: object
          properties:
            amount:
              type: number
            currency:
              type: string
        stock:
          type: integer
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
paths:
  /api/auth/register:
    post:
      summary: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, confirmPassword]
              properties:
                email:
                  type: string
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccess'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccess'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/logout:
    post:
      summary: Logout
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /api/products:
    get:
      summary: Get all products (public)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: category
          in: query
          schema:
            type: string
        - name: brand
          in: query
          schema:
            type: string
        - name: minPrice
          in: query
          schema:
            type: number
        - name: maxPrice
          in: query
          schema:
            type: number
        - name: search
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
    post:
      summary: Create product (Shop only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, price, stock]
              properties:
                name:
                  type: string
                description:
                  type: string
                images:
                  type: array
                  items:
                    type: string
                category:
                  type: string
                brand:
                  type: string
                price:
                  type: object
                  properties:
                    amount:
                      type: number
                    currency:
                      type: string
                      default: VND
                stock:
                  type: integer
                specs:
                  type: object
      responses:
        201:
          description: Created
        403:
          description: Forbidden
  /api/products/{id}:
    get:
      summary: Get product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        404:
          description: Not found
    put:
      summary: Update product (Shop owner only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: object
                stock:
                  type: integer
      responses:
        200:
          description: OK
        404:
          description: Not found
    delete:
      summary: Delete product (Shop owner only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        404:
          description: Not found
  /api/products/shop/my-products:
    get:
      summary: Get shop's products
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: OK
  /api/products/{id}/approve:
    put:
      summary: Approve product (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [APPROVED, REJECTED]
                rejectedReason:
                  type: string
      responses:
        200:
          description: OK
  /api/orders:
    post:
      summary: Create order (Customer only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [items, shippingAddress]
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      quantity:
                        type: integer
                shippingAddress:
                  type: object
                  properties:
                    recipientName:
                      type: string
                    phone:
                      type: string
                    street:
                      type: string
                    city:
                      type: string
                note:
                  type: string
      responses:
        201:
          description: Created
    get:
      summary: Get customer orders
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
  /api/orders/{id}:
    get:
      summary: Get order by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        404:
          description: Not found
  /api/orders/{id}/cancel:
    put:
      summary: Cancel order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        200:
          description: OK